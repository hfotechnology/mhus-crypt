#
# Copyright (C) 2019 Mike Hummel (mh@mhus.de)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import blowfish
import base64
from Crypto.PublicKey import RSA
from Crypto import Random
import ast
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Hash import SHA

# https://github.com/jashandeep-sohi/python-blowfish
# https://pycryptodome.readthedocs.io/en/latest/src/cipher/oaep.html

# old https://gitlab.com/m2crypto/m2crypto
# old https://stackoverflow.com/questions/43664751/python-to-java-encryption-rsa

# https://daniellimws.github.io/rsa-java-to-python


# RSA/ECB/PKCS1Padding

# pip install blowfish
# ???? pip install crypto rsa
# pip install pycryptodome

cipherBlowfish = blowfish.Cipher(b'testit')

encrypted = 'jZm1l82bdMU8+nc6pt/C/E+isFlJyKvZtwcNR3aLAp7Y8xT3hqKzrtsjhn85KfaN8dR5hgFRTHaEzd/xRqQYC3xQu7U0jwl/LJCPMMC1BBdth/PvfuF5Qr6u/TLz1vl2ZkGXf6aoBx4LWhBONT/OkbGwjGrjdHVtzx1meSHJyGjY0rsc8+s2sMQsbAKwMA8ZCGDRrT9277R36nTaTOIbb+z9wJY7wh3kTZj4KpkXBQOIziB0BAQwXOIHXvGx95Nh31A8pCNS8voBz8wuIsOPKMKvYq7l+X5QthxySY3LXw/l2F5eH7d2sT/JFiljwtJzouhxfdAC5crfieMHYfN5frm0d+1cB1TMjkbVW505GZpauLXLQs9WA3CRK8t8vQDZJKPvr1CgYZZoylEPYwqF7W00rtbhBMX3+YtWE8qNUfo6OD3Cj23GYQnXVTLCJhxAizYX7sSLnkYNiH4HHkW187PNYda/fIHoybJ5jPzZ3nSVvKh/lNzetUoxAUHM0noqMTXGEhnQLN+dq/LTo7uJ5czasWu6nx2hEsmGTyRNvSsFbjLiqVlee4BbjgJVel/LFYIaWeLYtDZZwGBTS81pCTxU8gF3ksIQtiDesvyzBFBP9bHyu/aS8RvqGg2IeHZY0GZHtBygZMs++HnmJQ2QfGbQs6OuRnVEMgV5rI3WcAwrcz38/g4/4IR27TwISMubzRT1zFVaocklJ4TEucFgz0OU1euETa0xbStc/HPUBKrZt3+9w0sGmNzvXUnKzAoNtMMq7TIxJ4ik6jzYURWV7qKfyN+0Wk27nOaXlBPNPitvUYoSaygysK1CjaC2+PnCkpPaZA7Q0RQAZvboBynqEw=='
encrypted_text = """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""".replace("\n","")

data_encrypted = base64.b64decode(encrypted)
while len(data_encrypted) % 8 != 0:
    data_encrypted+=b'\x00'
data_decrypted = bytearray(b"".join(cipherBlowfish.decrypt_ecb(data_encrypted)))
while (data_decrypted[len(data_decrypted)-1] == 6):
    del data_decrypted[-1]

key = base64.b64encode(data_decrypted)

private_key = "-----BEGIN RSA PRIVATE KEY-----\n" + key.decode("utf-8") + "\n-----END RSA PRIVATE KEY-----"

dsize = SHA.digest_size
sentinel = Random.new().read(15+dsize)


rsa_private_key = RSA.importKey(private_key)
#rsa_private_key = PKCS1_OAEP.new(rsa_private_key)

cipherRsa = PKCS1_v1_5.new(rsa_private_key)

keyLength = 1024
blockSize = int(keyLength / 1024 * 128)

encryptedBytes = base64.b64decode(encrypted_text)
plainText = ""
while len(encryptedBytes) > 0:
    bytes = encryptedBytes[0:blockSize]
    encryptedBytes = encryptedBytes[blockSize:]

    plainPart = cipherRsa.decrypt(bytes, sentinel)
    plainText = plainText + plainPart.decode("utf-8")
    
print(plainText)

# decrypted = key.decrypt(ast.literal_eval(str(encrypted)))
